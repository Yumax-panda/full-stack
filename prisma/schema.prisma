generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator fabbrica {
  provider    = "prisma-fabbrica"
  output      = "../src/__generated__/fabbrica"
  tsconfig    = "../tsconfig.json"
  noTranspile = true
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text()
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Skill {
  id        String             @id @default(cuid())
  name      String
  level     Int                @default(0)
  image     String?            @db.Text()
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      SkillTagRelation[]

  @@unique([userId, name])
  @@index([userId])
}

model Tag {
  id        String             @id @default(cuid())
  name      String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  color     String
  userId    String
  brief     String?
  skills    SkillTagRelation[]
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
}

model SkillTagRelation {
  skillId   String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  skill     Skill    @relation(fields: [skillId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([skillId, tagId])
  @@index([skillId])
  @@index([tagId])
}

model Work {
  id        String   @id @default(cuid())
  title     String?  @db.Text()
  thumbnail String?  @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String?  @db.Text()
  pinned    Boolean  @default(false)
  userId    String
  isPrivate Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ArticleToken {
  provider Provider
  token    String
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, userId])
  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?        @db.Text()
  location      String?
  organization  String?
  bio           String?
  accounts      Account[]
  apiTokens     ArticleToken[]
  sessions      Session[]
  skills        Skill[]
  tags          Tag[]
  works         Work[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Provider {
  QIITA
  ZENN
  NOTE
}
