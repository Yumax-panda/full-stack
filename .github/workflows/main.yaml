name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:
  packages:
    name: check npm install
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./.tool-versions
          cache: npm
      - name: check npm ci
        run: npm ci
  lint:
    name: run lint
    runs-on: ubuntu-latest
    needs: [packages]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./.tool-versions
          cache: npm
      - name: npm ci
        run: npm ci
      - name: generate prisma client
        run: npx prisma generate
      - name: run lint
        run: npm run lint -- --max-warnings=0
  format:
    name: run format
    runs-on: ubuntu-latest
    needs: [packages]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./.tool-versions
          cache: npm
      - name: npm ci
        run: npm ci
      - name: run format
        run: npx prettier --check .
  test-unit:
    name: run test
    runs-on: ubuntu-latest
    needs: [packages]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./.tool-versions
          cache: npm
      - name: npm ci
        run: npm ci
      - name: run test
        run: npm run test:unit
  test-database:
    name: run tests with database
    runs-on: ubuntu-latest
    needs: [packages]
    timeout-minutes: 60
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./.tool-versions
          cache: npm
      - name: npm ci
        run: npm ci
      - name: sync prisma schema
        run: npx prisma db push
      - name: run test
        run: npm run test:database
    env:
      DATABASE_URL: postgres://root:secret@localhost:5432/mydb
      DIRECT_URL: postgres://root:secret@localhost:5432/mydb
  test-e2e:
    name: run e2e test
    runs-on: ubuntu-latest
    needs: [packages]
    timeout-minutes: 60
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./.tool-versions
          cache: npm
      - name: npm ci
        run: npm ci
      - name: install playwright browsers
        run: npx playwright install --with-deps
      - name: sync prisma schema
        run: npx prisma db push
      - name: run e2e test
        run: npm run test:e2e
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
    env:
      DATABASE_URL: postgres://root:secret@localhost:5432/mydb
      DIRECT_URL: postgres://root:secret@localhost:5432/mydb
